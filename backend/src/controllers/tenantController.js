const Tenant = require('../models/Tenant');
const Room = require('../models/Room');

// ---------------- Helper ----------------
async function recomputeRoomOccupancy(roomId) {
  if (!roomId) return null;
  const room = await Room.findById(roomId);
  if (!room) return null;

  // Count active tenants
  const activeCount = await Tenant.countDocuments({
    room: room._id,
    $or: [{ moveOutDate: { $exists: false } }, { moveOutDate: null }]
  });

  // Ensure room.tenants only contains actual tenants
  const existingTenants = await Tenant.find({ room: room._id }).select('_id');
  room.tenants = existingTenants.map(t => t._id);

  room.isBooked = activeCount > 0;
  await room.save();
  return room;
}

// ---------------- CREATE ----------------
exports.createTenant = async (req, res) => {
  try {
    const {
      fullName,
      email,
      phone,
      gender,
      address,
      idProofType,
      idProofNumber,
      advancedAmount,
      rentAmount,
      room: roomId,
      moveInDate,
      numberOfPersons
    } = req.body;

    if (!fullName || !roomId || numberOfPersons == null || rentAmount == null) {
      return res.status(400).json({
        message: 'fullName, room, numberOfPersons, and rentAmount are required'
      });
    }

    // ✅ Validate phone number (10 digits)
    if (phone && !/^[0-9]{10}$/.test(phone)) {
      return res.status(400).json({ message: 'Phone number must be exactly 10 digits' });
    }

    const room = await Room.findById(roomId);
    if (!room) return res.status(404).json({ message: 'Room not found' });
    if (room.isBooked) return res.status(400).json({ message: 'Room is already booked' });

    // Tenant ID is auto-generated by model pre-save hook
    const tenant = await Tenant.create({
      fullName,
      email: email || "",
      phone: phone || "",
      gender: gender || "",
      address: address || "",
      idProofType: idProofType || "",
      idProofNumber: idProofNumber || "",
      advancedAmount: Number(advancedAmount) || 0,
      rentAmount: Number(rentAmount),
      numberOfPersons: Number(numberOfPersons),
      moveInDate: moveInDate ? new Date(moveInDate) : new Date(),
      room: roomId
    });

    // Update room occupancy
    room.tenants = room.tenants || [];
    room.tenants.push(tenant._id);
    room.isBooked = room.tenants.length > 0;
    await room.save();

    const populated = await Tenant.findById(tenant._id).populate({
      path: 'room',
      populate: { path: 'building' }
    });

    res.status(201).json(populated);
  } catch (err) {
    console.error('createTenant error:', err);
    if (err.name === 'ValidationError') {
      const details = Object.values(err.errors).map(e => e.message);
      return res.status(400).json({ message: 'Validation failed', details });
    }
    res.status(500).json({ message: err.message || 'Server error' });
  }
};

// ---------------- GET ALL ----------------
exports.getAllTenants = async (req, res) => {
  try {
    const tenants = await Tenant.find().populate({
      path: 'room',
      populate: { path: 'building' }
    });
    res.json(tenants);
  } catch (err) {
    console.error('getAllTenants error:', err);
    res.status(500).json({ message: err.message || 'Server error' });
  }
};

// ---------------- GET ONE ----------------
exports.getTenant = async (req, res) => {
  try {
    const { id } = req.params;
    const tenant = await Tenant.findOne({
      $or: [{ _id: id }, { tenantId: id }]
    }).populate({ path: 'room', populate: { path: 'building' } });

    if (!tenant) return res.status(404).json({ message: 'Tenant not found' });
    res.json(tenant);
  } catch (err) {
    console.error('getTenant error:', err);
    res.status(500).json({ message: err.message || 'Server error' });
  }
};

// ---------------- UPDATE ----------------
exports.updateTenant = async (req, res) => {
  try {
    const { id } = req.params;

    // Extract room id if provided
    const rawRoom = req.body.room;
    let newRoomId = undefined;
    if (rawRoom !== undefined) {
      if (rawRoom && typeof rawRoom === 'object') {
        newRoomId = rawRoom._id || rawRoom.id || null;
      } else {
        newRoomId = rawRoom;
      }
    }

    const {
      fullName,
      email,
      phone,
      gender,
      address,
      idProofType,
      idProofNumber,
      advancedAmount,
      rentAmount,
      moveInDate,
      moveOutDate,
      numberOfPersons
    } = req.body;

    // ✅ Validate phone number (if updating)
    if (phone && !/^[0-9]{10}$/.test(phone)) {
      return res.status(400).json({ message: 'Phone number must be exactly 10 digits' });
    }

    const tenant = await Tenant.findById(id);
    if (!tenant) return res.status(404).json({ message: 'Tenant not found' });

    const oldRoomId = tenant.room ? tenant.room.toString() : null;

    // Handle room change
    if (newRoomId !== undefined && newRoomId !== null && String(newRoomId) !== String(oldRoomId)) {
      let newRoom;
      try {
        newRoom = await Room.findById(newRoomId);
      } catch (err) {
        return res.status(400).json({ message: 'Invalid room id provided' });
      }
      if (!newRoom) return res.status(404).json({ message: 'New room not found' });

      if (oldRoomId) {
        const oldRoom = await Room.findById(oldRoomId);
        if (oldRoom) {
          oldRoom.tenants = (oldRoom.tenants || []).filter(tid => tid.toString() !== tenant._id.toString());
          await oldRoom.save();
          await recomputeRoomOccupancy(oldRoom._id);
        }
      }

      newRoom.tenants = newRoom.tenants || [];
      if (!newRoom.tenants.some(tid => tid.toString() === tenant._id.toString())) {
        newRoom.tenants.push(tenant._id);
      }
      newRoom.isBooked = newRoom.tenants.length > 0;
      await newRoom.save();
      tenant.room = newRoom._id;
      await recomputeRoomOccupancy(newRoom._id);
    }

    // Update tenant fields
    if (fullName !== undefined) tenant.fullName = fullName;
    if (email !== undefined) tenant.email = email;
    if (phone !== undefined) tenant.phone = phone;
    if (gender !== undefined) tenant.gender = gender;
    if (address !== undefined) tenant.address = address;
    if (idProofType !== undefined) tenant.idProofType = idProofType;
    if (idProofNumber !== undefined) tenant.idProofNumber = idProofNumber;
    if (advancedAmount !== undefined) tenant.advancedAmount = Number(advancedAmount) || 0;
    if (rentAmount !== undefined) tenant.rentAmount = Number(rentAmount) || 0;
    if (numberOfPersons !== undefined) tenant.numberOfPersons = Number(numberOfPersons) || 1;
    if (moveInDate !== undefined) tenant.moveInDate = moveInDate ? new Date(moveInDate) : tenant.moveInDate;
    if (moveOutDate !== undefined) tenant.moveOutDate = moveOutDate ? new Date(moveOutDate) : tenant.moveOutDate;

    await tenant.save();

    const populated = await Tenant.findById(tenant._id).populate({ path: 'room', populate: { path: 'building' } });
    res.json(populated);
  } catch (err) {
    console.error('updateTenant error:', err);
    if (err.name === 'CastError') return res.status(400).json({ message: 'Invalid id format' });
    if (err.name === 'ValidationError') {
      const details = Object.values(err.errors).map(e => e.message);
      return res.status(400).json({ message: 'Validation failed', details });
    }
    res.status(500).json({ message: err.message || 'Server error' });
  }
};

// ---------------- DELETE ----------------
exports.deleteTenant = async (req, res) => {
  try {
    const { id } = req.params;
    const tenant = await Tenant.findById(id);
    if (!tenant) return res.status(404).json({ message: 'Tenant not found' });

    const roomId = tenant.room;
    await tenant.deleteOne();
    if (roomId) await recomputeRoomOccupancy(roomId);

    res.json({ message: 'Tenant deleted successfully' });
  } catch (err) {
    console.error('deleteTenant error:', err);
    res.status(500).json({ message: err.message || 'Server error' });
  }
};

// ---------------- MARK LEAVE ----------------
exports.markLeaveTenant = async (req, res) => {
  try {
    const { id } = req.params;
    const { moveOutDate } = req.body;
    if (!moveOutDate) return res.status(400).json({ message: 'moveOutDate is required' });

    const tenant = await Tenant.findById(id);
    if (!tenant) return res.status(404).json({ message: 'Tenant not found' });

    tenant.moveOutDate = new Date(moveOutDate);
    await tenant.save();

    if (tenant.room) await recomputeRoomOccupancy(tenant.room);

    const populated = await Tenant.findById(tenant._id).populate({ path: 'room', populate: { path: 'building' } });
    res.json({ message: 'Tenant marked as left', tenant: populated });
  } catch (err) {
    console.error('markLeaveTenant error:', err);
    res.status(500).json({ message: err.message || 'Server error' });
  }
};

// ---------------- GET TENANTS BY BUILDINGS ----------------
exports.getTenantsByBuildings = async (req, res) => {
  try {
    const raw = req.query.buildings || "";
    const buildingIds = raw.split(",").map(s => s.trim()).filter(Boolean);
    if (!buildingIds.length) return res.status(400).json({ message: "building ids are required" });

    const rooms = await Room.find({ building: { $in: buildingIds } }).select("_id");
    const roomIds = rooms.map(r => r._id);
    if (!roomIds.length) return res.json([]);

    const tenants = await Tenant.find({ room: { $in: roomIds } })
      .populate({ path: 'room', populate: { path: 'building' } });

    res.json(tenants);
  } catch (err) {
    console.error('getTenantsByBuildings error:', err);
    res.status(500).json({ message: err.message || 'Server error' });
  }
};
